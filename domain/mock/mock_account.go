// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "go-eventsourcing-patterns/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountCommandService is a mock of AccountCommandService interface.
type MockAccountCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountCommandServiceMockRecorder
}

// MockAccountCommandServiceMockRecorder is the mock recorder for MockAccountCommandService.
type MockAccountCommandServiceMockRecorder struct {
	mock *MockAccountCommandService
}

// NewMockAccountCommandService creates a new mock instance.
func NewMockAccountCommandService(ctrl *gomock.Controller) *MockAccountCommandService {
	mock := &MockAccountCommandService{ctrl: ctrl}
	mock.recorder = &MockAccountCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountCommandService) EXPECT() *MockAccountCommandServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountCommandService) CreateAccount(ctx context.Context, cmd domain.CreateAccountCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountCommandServiceMockRecorder) CreateAccount(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountCommandService)(nil).CreateAccount), ctx, cmd)
}

// Deposit mocks base method.
func (m *MockAccountCommandService) Deposit(ctx context.Context, cmd domain.DepositCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockAccountCommandServiceMockRecorder) Deposit(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockAccountCommandService)(nil).Deposit), ctx, cmd)
}

// Withdraw mocks base method.
func (m *MockAccountCommandService) Withdraw(ctx context.Context, cmd domain.WithdrawCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockAccountCommandServiceMockRecorder) Withdraw(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccountCommandService)(nil).Withdraw), ctx, cmd)
}

// MockAccountQueryService is a mock of AccountQueryService interface.
type MockAccountQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountQueryServiceMockRecorder
}

// MockAccountQueryServiceMockRecorder is the mock recorder for MockAccountQueryService.
type MockAccountQueryServiceMockRecorder struct {
	mock *MockAccountQueryService
}

// NewMockAccountQueryService creates a new mock instance.
func NewMockAccountQueryService(ctrl *gomock.Controller) *MockAccountQueryService {
	mock := &MockAccountQueryService{ctrl: ctrl}
	mock.recorder = &MockAccountQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountQueryService) EXPECT() *MockAccountQueryServiceMockRecorder {
	return m.recorder
}

// GetAccountByID mocks base method.
func (m *MockAccountQueryService) GetAccountByID(ctx context.Context, accountID string) (*domain.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, accountID)
	ret0, _ := ret[0].(*domain.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountQueryServiceMockRecorder) GetAccountByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountQueryService)(nil).GetAccountByID), ctx, accountID)
}

// GetAccountHistory mocks base method.
func (m *MockAccountQueryService) GetAccountHistory(ctx context.Context, accountID string) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountHistory", ctx, accountID)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountHistory indicates an expected call of GetAccountHistory.
func (mr *MockAccountQueryServiceMockRecorder) GetAccountHistory(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountHistory", reflect.TypeOf((*MockAccountQueryService)(nil).GetAccountHistory), ctx, accountID)
}

// ListAccounts mocks base method.
func (m *MockAccountQueryService) ListAccounts(ctx context.Context) ([]domain.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx)
	ret0, _ := ret[0].([]domain.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountQueryServiceMockRecorder) ListAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountQueryService)(nil).ListAccounts), ctx)
}

// MockAccountStore is a mock of AccountStore interface.
type MockAccountStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStoreMockRecorder
}

// MockAccountStoreMockRecorder is the mock recorder for MockAccountStore.
type MockAccountStoreMockRecorder struct {
	mock *MockAccountStore
}

// NewMockAccountStore creates a new mock instance.
func NewMockAccountStore(ctrl *gomock.Controller) *MockAccountStore {
	mock := &MockAccountStore{ctrl: ctrl}
	mock.recorder = &MockAccountStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStore) EXPECT() *MockAccountStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountStore) Create(ctx context.Context, account *domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountStoreMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountStore)(nil).Create), ctx, account)
}

// FindByID mocks base method.
func (m *MockAccountStore) FindByID(ctx context.Context, id string) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAccountStoreMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccountStore)(nil).FindByID), ctx, id)
}

// ListAll mocks base method.
func (m *MockAccountStore) ListAll(ctx context.Context) ([]*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockAccountStoreMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAccountStore)(nil).ListAll), ctx)
}

// Update mocks base method.
func (m *MockAccountStore) Update(ctx context.Context, account *domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountStoreMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountStore)(nil).Update), ctx, account)
}
