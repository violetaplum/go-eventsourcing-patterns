// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "go-eventsourcing-patterns/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandUseCase is a mock of CommandUseCase interface.
type MockCommandUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommandUseCaseMockRecorder
}

// MockCommandUseCaseMockRecorder is the mock recorder for MockCommandUseCase.
type MockCommandUseCaseMockRecorder struct {
	mock *MockCommandUseCase
}

// NewMockCommandUseCase creates a new mock instance.
func NewMockCommandUseCase(ctrl *gomock.Controller) *MockCommandUseCase {
	mock := &MockCommandUseCase{ctrl: ctrl}
	mock.recorder = &MockCommandUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandUseCase) EXPECT() *MockCommandUseCaseMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockCommandUseCase) CreateAccount(ctx context.Context, req domain.CreateAccountCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockCommandUseCaseMockRecorder) CreateAccount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockCommandUseCase)(nil).CreateAccount), ctx, req)
}

// DepositMoney mocks base method.
func (m *MockCommandUseCase) DepositMoney(ctx context.Context, req domain.DepositMoneyCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositMoney", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositMoney indicates an expected call of DepositMoney.
func (mr *MockCommandUseCaseMockRecorder) DepositMoney(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositMoney", reflect.TypeOf((*MockCommandUseCase)(nil).DepositMoney), ctx, req)
}

// WithDrawMoney mocks base method.
func (m *MockCommandUseCase) WithDrawMoney(ctx context.Context, req domain.WithdrawMoneyCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDrawMoney", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithDrawMoney indicates an expected call of WithDrawMoney.
func (mr *MockCommandUseCaseMockRecorder) WithDrawMoney(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDrawMoney", reflect.TypeOf((*MockCommandUseCase)(nil).WithDrawMoney), ctx, req)
}

// MockQueryUseCase is a mock of QueryUseCase interface.
type MockQueryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockQueryUseCaseMockRecorder
}

// MockQueryUseCaseMockRecorder is the mock recorder for MockQueryUseCase.
type MockQueryUseCaseMockRecorder struct {
	mock *MockQueryUseCase
}

// NewMockQueryUseCase creates a new mock instance.
func NewMockQueryUseCase(ctrl *gomock.Controller) *MockQueryUseCase {
	mock := &MockQueryUseCase{ctrl: ctrl}
	mock.recorder = &MockQueryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryUseCase) EXPECT() *MockQueryUseCaseMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockQueryUseCase) GetAccount(ctx context.Context, req domain.GetAccountQuery) (*domain.AccountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, req)
	ret0, _ := ret[0].(*domain.AccountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockQueryUseCaseMockRecorder) GetAccount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockQueryUseCase)(nil).GetAccount), ctx, req)
}

// GetBalance mocks base method.
func (m *MockQueryUseCase) GetBalance(ctx context.Context, req domain.GetBalanceQuery) (*domain.AccountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, req)
	ret0, _ := ret[0].(*domain.AccountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockQueryUseCaseMockRecorder) GetBalance(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockQueryUseCase)(nil).GetBalance), ctx, req)
}

// MockAccountStore is a mock of AccountStore interface.
type MockAccountStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStoreMockRecorder
}

// MockAccountStoreMockRecorder is the mock recorder for MockAccountStore.
type MockAccountStoreMockRecorder struct {
	mock *MockAccountStore
}

// NewMockAccountStore creates a new mock instance.
func NewMockAccountStore(ctrl *gomock.Controller) *MockAccountStore {
	mock := &MockAccountStore{ctrl: ctrl}
	mock.recorder = &MockAccountStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStore) EXPECT() *MockAccountStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountStore) Create(ctx context.Context, account domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountStoreMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountStore)(nil).Create), ctx, account)
}

// Delete mocks base method.
func (m *MockAccountStore) Delete(ctx context.Context, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountStoreMockRecorder) Delete(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountStore)(nil).Delete), ctx, accountID)
}

// GetAccount mocks base method.
func (m *MockAccountStore) GetAccount(ctx context.Context, accountId string) (*domain.AccountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountId)
	ret0, _ := ret[0].(*domain.AccountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountStoreMockRecorder) GetAccount(ctx, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountStore)(nil).GetAccount), ctx, accountId)
}

// GetByID mocks base method.
func (m *MockAccountStore) GetByID(ctx context.Context, accountID string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, accountID)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountStoreMockRecorder) GetByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountStore)(nil).GetByID), ctx, accountID)
}

// Update mocks base method.
func (m *MockAccountStore) Update(ctx context.Context, account domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountStoreMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountStore)(nil).Update), ctx, account)
}
